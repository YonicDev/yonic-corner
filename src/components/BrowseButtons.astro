---
interface Props {
    sites: Record<string, string>,
    activeSegment?: number,
}

const { sites, activeSegment = 2 } = Astro.props;

const segments = Astro.url.pathname.split("/");
const active = segments[activeSegment];
---

<ul class="browse-list">
    { Object.entries(sites).map(([id, label]) =>
        <li class="link">
            <a class:list={[active === id? "active" : undefined]} href={`/browse/${id}`}>
                {label.toUpperCase()}
            </a>
        </li>
    )}
</ul>

<style lang="scss">
    @use "../styles/util.scss";
    @use "../styles/vars.scss" as *;

    .browse-list {
        display: block;
        text-align: center;
        width: 100%;
        max-width: 1200px;
        padding: 0;
        margin: 0 auto;
        padding: 1rem;
        gap: 0.5em;
        font-weight: bold;
        flex-wrap: wrap;
        justify-content: center;
        li {
            display: inline-block;
            margin: 0.2rem 0.3rem;
            a {
                display: inline-block;
                position: relative;
                border: 2px solid #{$emphasis-color};
                background-color: #{$article-color};
                padding: 0.5rem 1rem;
                color: #{$emphasis-color};
                box-shadow: util.extrude(4);
                transform: translate3d(0, 0, 0);
                transition: all 0.1s ease-out;
                text-decoration: none;
                &:hover {
                    transform: translate3d(-4px, -4px, 0);
                    box-shadow: util.extrude(8);
                }
                &:active {
                    transform: translate3d(4px, 4px, 0);
                    box-shadow: none;
                }
                &.active {
                    background-color: $nav-color-dark;
                    color: $article-color;
                }
            }
        }
    }
</style>