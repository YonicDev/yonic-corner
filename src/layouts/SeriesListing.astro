---
import { getImage } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';

import { categories } from "@lib/settings";

import Tag from "@lib/components/Tag.svelte";

interface Props {
    posts: CollectionEntry<"blog">[],
    baseUrl: string,
}

const { posts, baseUrl } = Astro.props;

const heroImages = await Promise.all(posts.map(async (post) => {
    // The images can be of any supported filetype, not just PNG.
    // But the file *has* to be an article asset named hero.png,
    // regardless of what the image type actually is.
    try {
        const imageMeta: ImageMetadata = (await import(`../assets/articles/${post.slug}/hero.png`)).default;
        const processedImage = await getImage({ src: imageMeta, width: 550, height: 280, format: "webp"});
        return Promise.resolve(processedImage.src);
    } catch (err) {
        return null;
    }
}));

const dateFormat = new Intl.DateTimeFormat('en-US',
{
    year: 'numeric',
    month: 'long',
    day: '2-digit',
})

---

<slot/>
<ul class="listing">
{ 
    // Nested anchor elements are illegal, so instead, we make hit zones in separate layers.
    posts.map((post, i) => (
        <li class="article">
            <span class="number">#{i+1}</span>
            <a aria-label="Article poster image" class:list={["hero", heroImages[i]==null ? "placeholder" : null]} href={`/blog/article/${post.slug}`} style={`background-image: ${heroImages[i]? `url(${heroImages[i]})` : `url(/img/icons/category-${post.data.category}.svg), url(/img/pattern3.svg); background-color: ${categories[post.data.category].baseColor}`}; background-position: center ${post.data.heroPosition ?? "center"}, top left`}/>
            <div class="data">
                <a href={`/category/${post.data.category}/1`} class="category">{categories[post.data.category].title.toUpperCase()}</a>
                <a href={`/blog/article/${post.slug}`}>
                    <h1>{post.data.title}{post.data.draft && <sup>[draft]</sup>}</h1>
                    <span class="metadata">
                        <span class="dataGroup">
                            <img class="icon" alt="Published" title="Published on" src="/img/icons/post.svg" width={24} height={24} />
                            <span>{dateFormat.format(post.data.pubDate)}</span>
                        </span>
                        { post.data.updatedDate && 
                            <span class="dataGroup">
                                <img class="icon" alt="Last updated" title="Last updated on" src="/img/icons/edit.svg" width={22} height={22} />
                                <span>{dateFormat.format(post.data.updatedDate)}</span>
                            </span>
                        }
                    </span>
                    <p class="description biyonic-string">{post.data.description}</p>
                    </a>
                <div class="tags">
                    <img class="icon" alt="Tags" title="Tags" src="/img/icons/tag.svg" width={22} height={22}/>
                    {
                        post.data.tags.length > 0 ? post.data.tags.map(tag => (
                            <Tag {tag} />
                        )) : <span>None</span>
                    }
                </div>
            </div>
        </li>
    ))
    
}
</ul>