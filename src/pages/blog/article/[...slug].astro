---
import { CollectionEntry, getCollection, getEntry } from 'astro:content';
import { getImage, Image } from 'astro:assets';

import { categories } from '@lib/settings';
import Layout from '@lib/layouts/Layout.astro';
import QuickLinks from '@lib/components/QuickLinks.svelte';
import Tag from '@lib/components/Tag.svelte';
import HTMLMusicPlayer from '@lib/components/HTMLMusicPlayer.svelte';
import PostIcon from '@lib/components/PostIcon.svelte';

import "@lib/styles/article.scss";

interface Props {
    post: CollectionEntry<'blog'>,
    allPosts: CollectionEntry<'blog'>[],
    index: number
}

export async function getStaticPaths() {
	const posts = (await getCollection('blog')).filter(post => {
        return import.meta.env.DEV || !post.data.draft;
    }).sort((a, b) => {
        const aPub = a.data.pubDate.getTime();
        const bPub = b.data.pubDate.getTime();
        const aEdt = a.data.updatedDate?.getTime() ?? 0;
        const bEdt = b.data.updatedDate?.getTime() ?? 0;
        return Math.max(bEdt, bPub) - Math.max(aPub, aEdt) || a.id.localeCompare(b.id);
    })
    
	return posts.map((post, i) => ({
		params: { slug: post.slug },
		props: {post, allPosts: posts, index: i },
	}));
}

const { post, allPosts, index } = Astro.props;
const postsSameCategory = allPosts.filter(other => post.data.category === other.data.category);
const postsSameSeries = allPosts.filter(other => post.data.series && other.data.series && post.data.series.id === other.data.series.id)
    .sort((a, b) => a.data.series!.order - b.data.series!.order);
const sameCategoryIndex = postsSameCategory.indexOf(post);
const sameSeriesIndex = postsSameSeries.indexOf(post)

const {pubDate, updatedDate, tags} = post.data;
const { Content } = await post.render();

const dateFormat = new Intl.DateTimeFormat('en-US',
{
    year: 'numeric',
    month: 'long',
    day: '2-digit',
})

const rainbowColors = ["#078D70","#26CEAA","#98E8C1","white","#7BADE2","#5049CC","#3D1A78"]
const bowrainColors = [...rainbowColors].reverse();

/**
 * Gets the hero image.
 * 
 * The hero image has to be named "hero.png" and be located in a folder named the same way
 * as the target article inside the assets/articles folder.
 * It doesn't need to be a PNG image, other formats are supported.
 */
async function getHeroImage(): Promise<ImageMetadata | null> {
    try {
        return (await import(`../../../assets/articles/${post.slug}/hero.png`)).default
    } catch {
        return null;
    }
}

const hero = await getHeroImage();
const series = post.data.series ? await getEntry(post.data.series.id) : null;

---

<Layout {...post.data} twitterCard="summary_large_image" description={post.data.description} coverImage={hero? `${Astro.url.protocol}//${Astro.url.host}${(await getImage({src: hero, width: 600, format: "jpg"})).src}` : `${Astro.url.protocol}//${Astro.url.host}/img/seo/hero-${post.data.category}.png`} openGraph={{type: "article", article: {pubDate, updatedDate, category: post.data.category, tags}}} keywords={tags}>
    <main>
        <div class="blog-article">
            {hero && <Image class:list={["cover", post.data.heroPosition]} alt="Cover image" src={hero} width={768} height={432} />}
            <h1>{post.data.title}{ post.data.draft && <sup>[draft]</sup>}</h1>
            <p class="metadata dates">
                <PostIcon title="Publish date" icon="post" height={28} width={28}/>
                <span>{dateFormat.format(pubDate)}</span>
                {
                    updatedDate && (
                    <PostIcon title="Last edited" icon="edit" />
                    <span>{dateFormat.format(updatedDate)}</span>)
                }
            </p>
            { tags.length > 0 &&
            <p class="metadata tagList">
                <PostIcon title="Tags" icon="tag" />
                {tags.map(tag => <Tag {tag} /> )}
            </p>
            }
            <hr/>
            <Content />
        </div>
        <HTMLMusicPlayer client:idle />
        <div class="rainbow">
            <div class="rainbow-side">
                {rainbowColors.map((strip) => (
                    <div class="strip" style={`background: ${strip}`}/>
                ))}
            </div>
            <div class="rainbow-end">
                <div class="rainbow-corner">
                    {rainbowColors.map((strip, i) => (
                        <div class="rainbow-round" style={`background: ${strip}; --radius: calc(64px - ${i} * (64px / 7))`}/>
                    ))}
                </div>
                <div class="rainbow-horizontal">
                    {bowrainColors.map((strip) => (
                        <div class="strip" style={`background: ${strip}`}/>
                    ))}
                </div>
            </div>
        </div>
    </main>
    {
        post.data.series && series && <QuickLinks category="series" series={`Series: ${series.data.title}`} seriesUrl={`/series/${post.data.series.id.id}`} prev={postsSameSeries[sameSeriesIndex - 1]} next={postsSameSeries[sameSeriesIndex + 1]}/>
    }
    <QuickLinks category={post.data.category} series={`${categories[post.data.category].title} posts`} seriesUrl={`/category/${post.data.category}/1`} prev={postsSameCategory[sameCategoryIndex-1]} next={postsSameCategory[sameCategoryIndex+1]} />
    <QuickLinks prev={allPosts[index-1]} next={allPosts[index+1]} />
</Layout>

<style lang="scss">
    @use "sass:math";
    @use "../../../styles/util.scss";

    .rainbow {
        position: absolute;
        left: calc((100vw - 800px)/2 - 48px);
        top: -1rem;
        z-index: 2;
        width: calc(100vw + 64px);
        height: 100%;
        overflow-x: hidden;
        pointer-events: none;
        .rainbow-side {
            display: flex;
            width: 64px;
            height: calc(100% - 64px);
        }
        .strip {
            width: 100%;
            height: 100%;
        }
        .rainbow-end {
            position: absolute;
            bottom: 0;
            height: 64px;
            width: 120vw;
            display: flex;
            align-items: flex-start;
        }
        .rainbow-corner {
            display: inline-block;
            position: relative;
            width: 64px;
            height: 64px;
        }
        .rainbow-round {
            position: absolute;
            right: 0;
            width: var(--radius, 64px);
            height: var(--radius, 64px);
            border-bottom-left-radius: 100%;
            &.one {
                background-color: green;
                --radius: 64px;
            }
            &.two {
                background-color: #1c2469;
                --radius: 32px;
            }
        }
        .rainbow-horizontal {
            width: 100vw;
            height: 64px;
            display: flex;
            flex-direction: column;
        }
    }

    $rainbow-colors: #078D70 #26CEAA #98E8C1 white #7BADE2 #5049CC #3D1A78;
    @each $rainbow-color in $rainbow-colors {
        $i: index($rainbow-colors, $rainbow-color);
        .rainbow .rainbow-round:nth-child(#{$i}) {
            background-color: $rainbow-color;
            width: #{64px - ($i - 1) * math.div(64px, 7)};
            height: #{64px - ($i - 1) * math.div(64px, 7)};
            width: calc(64px - #{$i - 1} * math.div(64px, 7));
            height: calc(64px - #{$i - 1} * math.div(64px, 7));
        }
    }

    @media screen and (max-width: 750px) {
        .rainbow {
            display: none;
        }
        main {
            padding: 0;
        }
    }
</style>

<style is:inline>
    figure {
        margin: 1em 0;
        box-sizing: border-box;
        max-width: 768px;
    }
    figure > img {
        width: 100%;
        height: auto;
    }
    figcaption {
        font-style: italic;
    }
    figcaption em {
        font-style: normal;
    }
</style>