---
import { type CollectionEntry, getCollection } from "astro:content";
import type { GetStaticPaths, Page } from "astro";

import { filterPosts, getHeroImages, sortPosts } from '@lib/util';
import { BLOG_PAGE_SIZE } from "@lib/settings";

import Layout from "@lib/layouts/Layout.astro";
import PostListing from "@lib/layouts/PostListing.svelte";

import "@lib/styles/rainbow.scss"

export const getStaticPaths: GetStaticPaths = async ({paginate}) => {
    const allPosts = (await getCollection('blog')).filter(filterPosts).sort(sortPosts);
        
    const tags = [...new Set(allPosts.flatMap(post => post.data.tags))];
    return tags.flatMap(tag => {
        const posts = allPosts.filter(post => post.data.tags.indexOf(tag) >= 0)
        return paginate(posts, {
            pageSize: BLOG_PAGE_SIZE, 
            props: { tag },
            params: { tag }, 
        });
    })
};

interface Props {
    page: Page,
    tag: string,
}

const { page, tag } = Astro.props;
const posts: CollectionEntry<'blog'>[] = page.data;

const heroImages = await getHeroImages(posts);

const rainbowColors = ["#078D70","#26CEAA","#98E8C1","white","#7BADE2","#5049CC","#3D1A78"]
const bowrainColors = [...rainbowColors].reverse();
---

<Layout title={`Posts with tag '${tag!.replace("-", " ")}'`} keywords={["blog","search",tag!]}>
    <main>
        <div class="heroContainer">
            <h1>{page.total} posts tagged with tag "{tag!.replace("-", " ")}"</h1>
            <p><a href="/tags">&laquo; Check all tags</a></p>
        </div>
        <div class="rainbowAnchor">
            <div class="listing">
                <PostListing baseUrl={`/tags/${tag}`} {posts} lastPage={page.lastPage} {heroImages}/>
            </div>
            <div class="rainbow">
                <div class="rainbow-side">
                    {rainbowColors.map((strip) => (
                        <div class="strip" style={`background: ${strip}`}/>
                    ))}
                </div>
                <div class="rainbow-end">
                    <div class="rainbow-corner">
                        {rainbowColors.map(_ => (
                            <div class="rainbow-round" />
                        ))}
                    </div>
                    <div class="rainbow-horizontal">
                        {bowrainColors.map((strip) => (
                            <div class="strip" style={`background: ${strip}`}/>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>

<style lang="scss">
    @use "../../../../styles/util.scss";
    @use "../../../../styles/vars.scss" as *;
    .heroContainer {
        display: block;
        width: 90%;
        position: relative;
        margin: 1rem auto;
        border: 4px solid #{$emphasis-color};
        background-color: $article-color;
        box-shadow: util.extrude(12);
        z-index: 2;
        padding: 0.5rem 1rem;
        p {
            font-size: 14pt;
        }
    }
</style>

<style is:inline>
    .nav {
        margin-top: 100px!important;
    }
</style>