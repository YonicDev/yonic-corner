---
import { getImage } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";
import type { GetImageResult } from "astro";

import { HIDE_DRAFTS_IN_DEVELOPMENT } from "@lib/settings";

import Layout from "@lib/layouts/Layout.astro";
import SeriesListing from "@lib/layouts/SeriesListing.astro";

import "@lib/styles/series.scss";
import "@lib/styles/rainbow.scss";

export const getStaticPaths = async() => {
    const series = await getCollection("series");
    const allPosts = (await getCollection('blog'))
    .filter(post => import.meta.env.DEV || !post.data.draft)
    .sort((a, b) => {
        const aPub = a.data.pubDate.getTime();
        const bPub = b.data.pubDate.getTime();
        const aEdt = a.data.updatedDate?.getTime() ?? 0;
        const bEdt = b.data.updatedDate?.getTime() ?? 0;
        return Math.max(bEdt, bPub) - Math.max(aPub, aEdt);
    });
    return series.map(serie => {
        return {
            params: { series: serie.id },
            props: {
                series: serie.data,
                posts: allPosts.filter(post => post.data.series?.id.id === serie.id)
            }
        }
    });
}

interface Props {
    series: CollectionEntry<"series">["data"],
    posts: CollectionEntry<"blog">[]
}

const { posts, series } = Astro.props;
const { series: seriesId } = Astro.params;

const rainbowColors = ["#078D70","#26CEAA","#98E8C1","white","#7BADE2","#5049CC","#3D1A78"]
const bowrainColors = [...rainbowColors].reverse();

let imageMeta: ImageMetadata | undefined;
let processedImage: GetImageResult | undefined;
if(seriesId) {
    try {
        imageMeta = (await import(`../assets/series/${seriesId}.png`)).default;
        processedImage = await getImage({ src: imageMeta!, width: 800, format: "webp", quality: seriesId? "mid" : "max"});
    } catch {
        imageMeta = undefined;
    }
}
const heroImage = processedImage? `url("${processedImage.src}")` : "url('/img/series-hero.svg')";
---

<Layout title="Posts">
    <main class="series-overview">
        <div class="heroContainer">
            <div class="data">
                <h1>{series.title}</h1>
                <p class="biyonic-string">{series.description}</p>
            </div>
            <div class="hero" style={{backgroundImage: heroImage}}/>
        </div>
        <div class="rainbowAnchor">
            <div class="listing">
                <SeriesListing posts={posts.filter(post => (import.meta.env.DEV && !HIDE_DRAFTS_IN_DEVELOPMENT) || !post.data.draft)} baseUrl="/blog" />
            </div>
            <div class="rainbow">
                <div class="rainbow-side">
                    {rainbowColors.map((strip) => (
                        <div class="strip" style={`background: ${strip}`}/>
                    ))}
                </div>
                <div class="rainbow-end">
                    <div class="rainbow-corner">
                        {rainbowColors.map(_ => (
                            <div class="rainbow-round" />
                        ))}
                    </div>
                    <div class="rainbow-horizontal">
                        {bowrainColors.map((strip) => (
                            <div class="strip" style={`background: ${strip}`}/>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>