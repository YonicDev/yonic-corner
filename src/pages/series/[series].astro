---
import { getImage } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";
import type { GetImageResult } from "astro";

import { filterPosts, sortPosts } from "@lib/util";

import Layout from "@lib/layouts/Layout.astro";
import SeriesListing from "@lib/layouts/SeriesListing.astro";

import "@lib/styles/series.scss";
import "@lib/styles/rainbow.scss";

export const getStaticPaths = async() => {
    const series = await getCollection("series");
    const allPosts = (await getCollection('blog')).filter(filterPosts);
    return series.map(serie => {
        return {
            params: { series: serie.id },
            props: {
                series: serie.data,
                posts: allPosts.filter(post => post.data.series?.id.id === serie.id).sort((a,b) => a.data.series!.order - b.data.series!.order)
            }
        }
    });
}

interface Props {
    series: CollectionEntry<"series">["data"],
    posts: CollectionEntry<"blog">[]
}

const { posts, series } = Astro.props;
const { series: seriesId } = Astro.params;

const rainbowColors = ["#078D70","#26CEAA","#98E8C1","white","#7BADE2","#5049CC","#3D1A78"]
const bowrainColors = [...rainbowColors].reverse();

let imageMeta: ImageMetadata | undefined;
let processedImage: GetImageResult | undefined;

if(seriesId) {
    try {
        imageMeta = (await import(`../../assets/series/${seriesId}.png`)).default;
        processedImage = await getImage({ src: imageMeta!, width: 800, format: "webp", quality: seriesId? "mid" : "max"});
    } catch (e) {
        if(e instanceof Error) {
            if(e.message.includes("Unknown variable dynamic import"))
            console.info(`[i] Series with ID ${seriesId} does not have a cover in the assets folder.\nMake sure it is properly named as ${seriesId}.png`);
            else
                console.error(e.message);
        }
        imageMeta = undefined;
    }
}
const heroImage = processedImage? `url("${processedImage.src}")` : "url('/img/series-hero.svg')";
---

<Layout title={series.title} description={series.description} twitterCard={processedImage? "summary_large_image" : "summary"} coverImage={processedImage? `${Astro.url.protocol}//${Astro.url.host}${processedImage.src}` : `${Astro.url.protocol}//${Astro.url.host}/img/seo/series.png`}>
    <main class="series-overview">
        <div class="heroContainer">
            <div class="data">
                <h1>{series.title}</h1>
                <p class="biyonic-string">{series.description}</p>
            </div>
            <div class="hero" style={{backgroundImage: heroImage}}/>
        </div>
        <div class="rainbowAnchor">
            <div class="listing">
                <SeriesListing {posts} baseUrl="/blog" />
            </div>
            <div class="rainbow">
                <div class="rainbow-side">
                    {rainbowColors.map((strip) => (
                        <div class="strip" style={`background: ${strip}`}/>
                    ))}
                </div>
                <div class="rainbow-end">
                    <div class="rainbow-corner">
                        {rainbowColors.map(_ => (
                            <div class="rainbow-round" />
                        ))}
                    </div>
                    <div class="rainbow-horizontal">
                        {bowrainColors.map((strip) => (
                            <div class="strip" style={`background: ${strip}`}/>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>

<style lang="scss">
    .series-overview {
        // min-height: calc(100vh - 110px - 114px);
        padding: 1rem 0;
        .heroContainer {
            height: auto;
        }
        .hero {
            padding: 0;
        }
    }
    @media screen and (max-width: 750px) {
        .series-overview .hero {
            height: auto;
            width: 100%;
            aspect-ratio: 16 / 9;
        }
    }
</style>