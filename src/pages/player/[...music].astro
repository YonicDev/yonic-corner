---
import { getCollection, type CollectionEntry } from "astro:content";

import { INVIDIOUS_DEFAULT_INSTANCE } from "@lib/settings"

import "@lib/styles/player.scss";
import "@lib/styles/themes/dark-player.scss";

export async function getStaticPaths() {
    const songList = await getCollection("music");
    return songList.map((song) => {
        return {
            params: { music: song.id },
            props: { music: song.data }
        }
    });
}

const {title, sources, author, album} = Astro.props.music;

const adaptiveFields = [
    { itag: 251, type: 'audio/webm; codecs="opus"'},
    { itag: 250, type: 'audio/webm; codecs="opus"'},
    { itag: 249, type: 'audio/webm; codecs="opus"'},
    { itag: 140, type: 'audio/mp4; codecs="mp4a.40.2"'},
    { itag: 139, type: 'audio/mp4; codecs="mp4a.40.5"'},
]

interface Props {
    music: CollectionEntry<"music">["data"]
}
---

<html>
    <head>
        <meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" href="/favicon.svg" type="image/svg+xml">
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Asap:ital,wght@0,400;0,600;1,400;1,600&family=Blinker:wght@600&family=Bungee&family=Fira+Code&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Asap:ital,wght@0,400;0,600;1,400;1,600&family=Blinker:wght@600&family=Bungee&family=Fira+Code&display=swap"></noscript>
		<noscript><link rel="stylesheet" href="/static-themes/dark-player.css"/></noscript>
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<meta name="generator" content={Astro.generator} />
        <script is:inline>
            var otherWindow;

            window.setOtherWindow = function(value) {
                otherWindow = value;
            }

            window.setTheme = function() {
                var theme = (function() {
                    var localTheme = localStorage.getItem("theme");
                    if ( typeof localStorage !== "undefined" && localTheme != null && localTheme !== "auto") {
                        return localTheme;
                    }
                    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
                        return "dark";
                    }
                    return "light";
                })()
    
                document.documentElement.setAttribute("data-theme", theme);
            }
            window.setTheme();
        </script>
    </head>
    <body>
        <p>{[title, album, author].filter(data => data!=null).join(" | ")}</p>
        <audio controls autoplay loop>
            { sources.flatMap((source) => { 
                if(source.type !== "youtube")
                    return <source src={source.src} type={source.type} />
                return adaptiveFields.map(({itag, type}) => {
                    return <source src={`${INVIDIOUS_DEFAULT_INSTANCE}/latest_version?id=${source.src}&itag=${itag}`} {type} />
                })
            }) }
        </audio>
    </body>
</html>