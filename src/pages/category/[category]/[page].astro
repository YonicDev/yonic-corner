---
import { getCollection } from "astro:content";
import type { GetStaticPaths, Page } from "astro";

import { filterPosts, getHeroImages, sortPosts } from '@lib/util';
import { type CategoryId, categories, BLOG_PAGE_SIZE } from "@lib/settings";

import Layout from "@lib/layouts/Layout.astro";
import PostListing from "@lib/layouts/PostListing.astro";
import CategoryHero from "@lib/components/CategoryHero.svelte";

import "@lib/styles/rainbow.scss";

export const getStaticPaths: GetStaticPaths = async ({paginate}) => {
    const ids = Object.keys(categories) as CategoryId[];
    const allPosts = await getCollection('blog');
    return ids.flatMap((catId) => {
        const category = categories[catId];
        const posts = allPosts.filter(post => post.data.category === catId).filter(filterPosts).sort(sortPosts);
        return paginate(posts, {
            pageSize: BLOG_PAGE_SIZE, 
            params: { category: catId }, 
            props: { category, categoryId: catId }
        });
    });
}

interface Props {
    category: Category,
    categoryId: CategoryId,
    page: Page
}

const { category, page, categoryId } = Astro.props;
const posts = page.data;

const rainbowColors = ["#078D70","#26CEAA","#98E8C1","white","#7BADE2","#5049CC","#3D1A78"]
const bowrainColors = [...rainbowColors].reverse();

const heroImages = await getHeroImages(posts);

---

<Layout title={`${category.title} posts`} description={category.description} keywords={["blog", "navigation", "category", "yonic corner", ...(categoryId? [categoryId] : [])]} coverImage={`${Astro.url.protocol}//${Astro.url.host}/img/seo/${categoryId}.png`}>
    <main class="main-container">
        <CategoryHero categoryId={categoryId ?? ""} {category} />
        <div class="rainbowAnchor">
            <div class="listing">
                <PostListing baseUrl={`/category/${categoryId ?? "misc"}`} {posts} lastPage={page.lastPage} {heroImages}/>
            </div>
            <div class="rainbow">
                <div class="rainbow-side">
                    {rainbowColors.map((strip) => (
                        <div class="strip" style={`background: ${strip}`}/>
                    ))}
                </div>
                <div class="rainbow-end">
                    <div class="rainbow-corner">
                        {rainbowColors.map(_ => (
                            <div class="rainbow-round" />
                        ))}
                    </div>
                    <div class="rainbow-horizontal">
                        {bowrainColors.map((strip) => (
                            <div class="strip" style={`background: ${strip}`}/>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>

<style is:inline>
    .nav {
        margin-top: 100px!important;
    }
</style>