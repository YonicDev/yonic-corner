---
import { CollectionEntry, getCollection } from "astro:content";
import type { GetStaticPaths, Page } from "astro";

import { getHeroImages } from '@lib/util';
import { CategoryId, categories, BLOG_PAGE_SIZE } from "@lib/settings";

import Layout from "@lib/layouts/Layout.astro";
import PostListing from "@lib/layouts/PostListing.svelte";
import CategoryHero from "@lib/components/CategoryHero.svelte";

export const getStaticPaths: GetStaticPaths = async ({paginate}) => {
    const ids = Object.keys(categories) as CategoryId[];
    const allPosts = await getCollection('blog');
    return ids.map((catId) => {
        const category = categories[catId];
        const posts = allPosts
            .filter(post => post.data.category === catId && (import.meta.env.DEV || !post.data.draft))
            .sort((a, b) => {
                const aPub = a.data.pubDate.getTime();
                const bPub = b.data.pubDate.getTime();
                const aEdt = a.data.updatedDate?.getTime() ?? 0;
                const bEdt = b.data.updatedDate?.getTime() ?? 0;
                return Math.max(bEdt, bPub) - Math.max(aPub, aEdt);
            });
        return paginate(posts, {
            pageSize: BLOG_PAGE_SIZE, 
            params: { category: catId }, 
            props: { category }
        });
    });
}

interface Props {
    category: Category,
    posts: CollectionEntry<'blog'>[],
    page: Page
}

const { category, page } = Astro.props;
const posts = page.data;
const { category: categoryId } = Astro.params;

const rainbowColors = ["#078D70","#26CEAA","#98E8C1","white","#7BADE2","#5049CC","#3D1A78"]
const bowrainColors = [...rainbowColors].reverse();

const heroImages = await getHeroImages(posts);
---

<Layout title={`${category.title} posts`}>
    <main>
        <CategoryHero categoryId={categoryId ?? ""} {category} />
        <div class="rainbowAnchor">
            <div class="listing">
                <PostListing baseUrl={`/category/${categoryId ?? "misc"}`} {posts} lastPage={page.lastPage} {heroImages}/>
            </div>
            <div class="rainbow">
                <div class="rainbow-side">
                    {rainbowColors.map((strip) => (
                        <div class="strip" style={`background: ${strip}`}/>
                    ))}
                </div>
                <div class="rainbow-end">
                    <div class="rainbow-corner">
                        {rainbowColors.map((strip, i) => (
                            <div class="rainbow-round" style={`background: ${strip}; --radius: calc(64px - ${i} * (64px / 7))`}/>
                        ))}
                    </div>
                    <div class="rainbow-horizontal">
                        {bowrainColors.map((strip) => (
                            <div class="strip" style={`background: ${strip}`}/>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>

<style is:inline>
    .nav {
        margin-top: 100px!important;
    }
</style>

<style lang="scss">
    @use "../../../styles/util.scss";

    .rainbowAnchor {
        position: relative;
        overflow: hidden;
        top: -5px;
        .listing {
            position: relative;
            width: 80%;
            max-width: 1000px;
            margin: 0 auto;
            z-index: 1;
        }
    }
    .rainbow {
        position: absolute;
        left: calc(50% - 24px);
        top: -4rem;
        width: calc(100% + 64px);
        height: calc(100% - 16px);
        overflow-x: hidden;
        pointer-events: none;
        .rainbow-side {
            display: flex;
            width: 64px;
            height: calc(100% - 64px);
        }
        .strip {
            width: 100%;
            height: 100%;
        }
        .rainbow-end {
            position: absolute;
            bottom: 0;
            height: 64px;
            width: 120vw;
            display: flex;
            align-items: flex-start;
        }
        .rainbow-corner {
            display: inline-block;
            position: relative;
            width: 64px;
            height: 64px;
        }
        .rainbow-round {
            position: absolute;
            right: 0;
            width: var(--radius, 64px);
            height: var(--radius, 64px);
            border-bottom-left-radius: 100%;
        }
        .rainbow-horizontal {
            width: 100vw;
            height: 64px;
            display: flex;
            flex-direction: column;
        }
    }

    @media screen and (max-width: 750px) {
        .heroContainer {
            flex-direction: column-reverse;
            height: 500px;
            h1 {
                margin: 0.25rem 0;
            }
            div {
                width: auto;
            }
            .data > p {
                min-height: 0;
            }
            .hero {
                flex-grow: 1;
            }
        }
    }
</style>